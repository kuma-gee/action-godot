name: Test for custom actions

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true
  
jobs:
  test-build:
    runs-on: ubuntu-latest
    container: barichello/godot-ci:4.3
    steps:
      - uses: actions/checkout@v4
      - uses: kuma-gee/action-godot-template/setup@v1
        with:
          version: 4.3
      - id: godot-build
        uses: ./godot-build
        with:
          channel: windows
          output: build
          game-folder: godot-game
          password: secret-password
      - run: |
          if [ ! -f build/windows/main.exe ]; then
            echo "::error::Build failed"
            exit 1
          fi

          if [ ! -f build/godot-game-windows.zip ]; then
            echo "::error::Zip file missing"
            exit 1
          fi

          unzip -d output -P $PASSWORD build/godot-game-windows.zip
          ls output

          if [ ! -f output/main.exe ]; then
            echo "::error::main.exe missing in zip"
            exit 1
          fi

          if [ "$GAME" != "godot-game" ]; then
            echo "::error::Game name is not godot-game"
            exit 1
          fi
        shell: bash
        env:
          GAME: ${{ steps.godot-build.outputs.game }}
          PASSWORD: secret-password

  test-changelog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./changelog
        id: changelog
        with:
          previous-tag: v0.1
          latest-tag: v0.2
      - run: |
          echo "::debug::Generated changelog $changelog"

          if ! echo "$changelog" | grep -q "v0.2"; then
            echo "::error::Changelog missing v0.2"
            exit 1
          fi
          if ! echo "$changelog" | grep -q "### Bug Fixes"; then
            echo "::error::Changelog Bug Fixes"
            exit 1
          fi
          if ! echo "$changelog" | grep -q "### Features"; then
            echo "::error::Changelog Features"
            exit 1
          fi

          commits=$(git log v0.1..v0.2 --oneline | cut -d' ' -f1)
          for commit in $commits; do
            if ! echo "$changelog" | grep -q "$commit"; then
              echo "::error::Commit $commit missing in changelog"
              exit 1
            fi
          done

          commitCount=$(echo "$commits" | wc -l)
          actualCount=$(echo "$changelog" | grep -o "* " | wc -l)
          if [ $actualCount -ne $commitCount ]; then
            echo "::error::There are $actualCount commits in changelog, but $commitCount expected"
            exit 1
          fi
        shell: bash
        env:
          changelog: ${{ steps.changelog.outputs.changelog }}

  test-godot-env:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./godot-env
        with:
          output: build.gd
          code: secret-game-code
          version: v1.0
          steam-app: 12345
      - run: |
          if ! grep -q v1.0 "$File"; then
            echo "::error::Game Version missing in file"
            exit 1
          elif ! grep -q $EXPECTED_HASH "$File"; then
            echo "::error::Game Hash missing in file"
            exit 1
          elif ! grep -q 12345 "$File"; then
            echo "::error::Steam App Id missing in file"
            exit 1
          fi
        shell: bash
        env:
          File: build.gd
          EXPECTED_HASH: bccc92b5f6c23cd6c5df292f608632278e0605f8540afeee9d258f7a2a8a6087

  test-password:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./password
        id: random-password-1
        with:
          length: 5
      - uses: ./password
        id: random-password-2
        with:
          length: 10
      - uses: ./password
        id: random-password-3
        with:
          length: 100
      - run: |
          echo "::debug::Generated password: $password1, $password2, $password3"

          if [ ${#password1} -ne 5 ]; then
            echo "::error::Password length is not 5"
            exit 1
          fi

          if [ ${#password2} -ne 10 ]; then
            echo "::error::Password length is not 10"
            exit 1
          fi

          if [ ${#password3} -ne 100 ]; then
            echo "::error::Password length is not 100"
            exit 1
          fi

          if [ "$password1" == "$password2" ]; then
            echo "::error::Passwords 1 and 2 are the same"
            exit 1
          fi

          if [ "$password1" == "$password3" ]; then
            echo "::error::Passwords 1 and 3 are the same"
            exit 1
          fi

          if [ "$password2" == "$password3" ]; then
            echo "::error::Passwords 2 and 3 are the same"
            exit 1
          fi
        shell: bash
        env:
          password1: ${{ steps.random-password-1.outputs.password }}
          password2: ${{ steps.random-password-2.outputs.password }}
          password3: ${{ steps.random-password-3.outputs.password }}
